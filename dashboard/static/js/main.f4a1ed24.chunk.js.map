{"version":3,"sources":["constants.js","utils/apiUtils.js","utils/networkUtils.js","utils/chartUtils.js","utils/commonUtils.js","components/charts/bar.js","components/charts/area.js","components/charts/line.js","components/charts/pie.js","components/loadingScreen/index.js","pages/dashboard/topContacts.js","pages/dashboard/recentActivity.js","pages/dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["API_METHOD","hostname","URL","window","location","API_BASE_URL","API_URL","SALES_CALL_BY_MONTH","SALES_BY_MONTH","ORDER_ENTRY","ANNUALIZED_SALES","ONE_CUSTOMER_INV","SALES_BREAKDOWN","S3_SALES_BREAKDOWN","TOP_CONTACTS","RECENT_ACTIVITY","CUSTOMER","API_NAMES","orderEntry","salesCallByMonth","annualizedSales","salesByMonth","oneCustomerInv","salesBreakDown","s3SalesBreakdown","topContacts","recentActivity","customer","PAGE_STATUS","fetchApiResponse","data","a","additionalHeaderObj","startTime","Date","getTime","initObj","method","headers","body","JSON","stringify","request","fetch","apiUrl","response","json","responseBody","console","log","getSalesCallByMonthData","id","reqDetails","FetchApiResponse","getOrderEntryData","getAnnualizedSalesData","getSalesByMonthData","getOneCustomerInvData","getSalesBreakdownData","getS3SalesBreakdownData","getTopContactsData","getRecentActivityData","getCustomerData","monthList","moment","monthsShort","barChartDefaultData","valueKeys","xAxis","goal","average","title","barColor","legends","label","color","type","prepareDataForBarChart","apiData","apiName","barChartData","length","xAxisList","yAxisList","forEach","item","push","MONTH","cloneDeep","legendsList","prepareLegendsList","prepareDataForAreaChart","chartData","yAxisBarList","TOTAL","maxYAxis","year","YEAR","prepareDataForLineChart","series","maxNumber","name","map","monthSale","marker","enabled","toString","prepareDataForPieChart","getUrlParams","url","params","parser","document","createElement","href","vars","search","substring","split","i","pair","decodeURIComponent","ReactHighcharts","Highcharts","setOptions","lang","thousandsSep","getConfig","BAR_MAX_NUMBER","Math","max","chart","height","legend","symbolHeight","symbolWidth","squareSymbol","symbolRadius","credits","text","yAxis","min","stackLabels","style","fontWeight","floor","tickAmount","categories","tooltip","headerFormat","pointFormat","prepareSeries","zIndex","zones","prevYear","getFullYear","BarChart","config","AreaChart","LineChart","colors","dataLabels","PieChart","LoadingScreen","className","TopContactsTable","Col","md","Table","striped","bordered","hover","contact","index","key","NAME","TITLE","TARGET","RecentActivity","activity","dangerouslySetInnerHTML","__html","MSG","Dashboard","props","setErrorsMsgs","apiResponses","errorMsgs","res","isPlainObject","errorMsg","sourceName","errorLocation","getBarChartData","state","orderEntryData","salesCallByMonthData","renderSuccessScreen","salesByMonthData","annualizedSalesData","oneCustomerInvData","salesBreakdownData","s3salesBreakdownData","topContactsData","recentActivityData","Row","hideErrorModal","setState","renderErrorModal","Modal","show","onHide","size","aria-labelledby","centered","Body","error","Footer","Button","variant","onClick","customerData","pageStatus","this","customerKey","customer_key","parseInt","Promise","all","then","values","Container","Navbar","Brand","React","Component","App","Boolean","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f4a1ed24.chunk.js","sourcesContent":["export const API_METHOD = {\n  GET: 'GET',\n  POST: 'POST',\n  PUT: 'PUT'\n};\n\n//export const API_BASE_URL = 'http://54.160.141.173:3010/api/'\nconst hostname = new URL(window.location).hostname;\nconst API_BASE_URL = `https://${hostname}/api/`;\n\nexport const API_URL = {\n  SALES_CALL_BY_MONTH: `${API_BASE_URL}dashboard/salesCallByMonth/`,\n  SALES_BY_MONTH: `${API_BASE_URL}dashboard/salesByMonth/`,\n  ORDER_ENTRY: `${API_BASE_URL}dashboard/orderEntry/`,\n  ANNUALIZED_SALES: `${API_BASE_URL}dashboard/annualizedSales/`,\n  ONE_CUSTOMER_INV: `${API_BASE_URL}dashboard/oneCustomerInv/`,\n  SALES_BREAKDOWN: `${API_BASE_URL}dashboard/salesBreakDown/`,\n  S3_SALES_BREAKDOWN: `${API_BASE_URL}dashboard/s3SalesBreakdown/`,\n  TOP_CONTACTS: `${API_BASE_URL}dashboard/topContacts/`,\n  RECENT_ACTIVITY: `${API_BASE_URL}dashboard/recentActivity/`,\n  CUSTOMER: `${API_BASE_URL}/customer/customer/`\n};\n\nexport const API_NAMES = {\n  orderEntry: 'orderEntry',\n  salesCallByMonth: 'salesCallByMonth',\n  annualizedSales: 'annualizedSales',\n  salesByMonth: 'salesByMonth',\n  oneCustomerInv: 'oneCustomerInv',\n  salesBreakDown: 'salesBreakDown',\n  s3SalesBreakdown: 's3SalesBreakdown',\n  topContacts: 'topContacts',\n  recentActivity: 'recentActivity',\n  customer: 'customer'\n};\n\nexport const PAGE_STATUS = {\n  SUCCESS: 'SUCCESS',\n  ERROR: 'ERROR',\n  LOADING: 'LOADING',\n  LOADED: 'LOADED',\n  DEFAULT: 'DEFAULT'\n}\n","import {API_METHOD} from '../constants';\n\nexport default async function fetchApiResponse(data, additionalHeaderObj = {}) {\n  const startTime = (new Date()).getTime();\n  const initObj = {\n    method: data.method,\n    headers: {\n      ...additionalHeaderObj,\n    }\n  };\n  if (data.method === API_METHOD.POST || data.method === API_METHOD.PUT) {\n    initObj.body = JSON.stringify(data.request);\n  }\n  try {\n    const response = await fetch(data.apiUrl, initObj);\n    if (!response) {\n      return null;\n    }\n    const responseBody = await response.json();\n    console.log('API::', data.apiUrl, '::Took::', (((new Date()).getTime() - startTime) / 1000));\n    // console.log('API::', data.apiUrl, responseBody);\n    return responseBody;\n  } catch (e) {\n    return null;\n  }\n}","import {API_METHOD, API_URL} from '../constants';\nimport FetchApiResponse from './apiUtils';\n\nexport const getSalesCallByMonthData = async(id) => {\n  let data;\n  if (typeof(id) === 'number' && id >= 0) {\n    const reqDetails = {\n      method: API_METHOD.GET,\n      apiUrl: `${API_URL.SALES_CALL_BY_MONTH}${id}`\n    };\n    data = await FetchApiResponse(reqDetails);\n  }\n  return data;\n}\n\nexport const getOrderEntryData = async(id) => {\n  let data;\n  if (typeof(id) === 'number') {\n    const reqDetails = {\n      method: API_METHOD.GET,\n      apiUrl: `${API_URL.ORDER_ENTRY}${id}`\n    };\n    data = await FetchApiResponse(reqDetails);\n  }\n  return data;\n}\n\nexport const getAnnualizedSalesData = async(id) => {\n  let data;\n  if (typeof(id) === 'number') {\n    const reqDetails = {\n      method: API_METHOD.GET,\n      apiUrl: `${API_URL.ANNUALIZED_SALES}${id}`\n    };\n    data = await FetchApiResponse(reqDetails);\n  }\n  return data;\n}\n\nexport const getSalesByMonthData = async(id) => {\n  let data;\n  if (typeof(id) === 'number') {\n    const reqDetails = {\n      method: API_METHOD.GET,\n      apiUrl: `${API_URL.SALES_BY_MONTH}${id}`\n    };\n    data = await FetchApiResponse(reqDetails);\n  }\n  return data;\n}\n\nexport const getOneCustomerInvData = async(id) => {\n  let data;\n  if (typeof(id) === 'number') {\n    const reqDetails = {\n      method: API_METHOD.GET,\n      apiUrl: `${API_URL.ONE_CUSTOMER_INV}${id}`\n    };\n    data = await FetchApiResponse(reqDetails);\n  }\n  return data;\n}\n\nexport const getSalesBreakdownData = async(id) => {\n  let data;\n  if (typeof(id) === 'number') {\n    const reqDetails = {\n      method: API_METHOD.GET,\n      apiUrl: `${API_URL.SALES_BREAKDOWN}${id}`\n    };\n    data = await FetchApiResponse(reqDetails);\n  }\n  return data;\n}\n\nexport const getS3SalesBreakdownData = async(id) => {\n  let data;\n  if (typeof(id) === 'number') {\n    const reqDetails = {\n      method: API_METHOD.GET,\n      apiUrl: `${API_URL.S3_SALES_BREAKDOWN}${id}`\n    };\n    data = await FetchApiResponse(reqDetails);\n  }\n  return data;\n}\n\nexport const getTopContactsData = async(id) => {\n  let data;\n  if (typeof(id) === 'number') {\n    const reqDetails = {\n      method: API_METHOD.GET,\n      apiUrl: `${API_URL.TOP_CONTACTS}${id}`\n    };\n    data = await FetchApiResponse(reqDetails);\n  }\n  return data;\n}\n\nexport const getRecentActivityData = async(id) => {\n  let data;\n  if (typeof(id) === 'number') {\n    const reqDetails = {\n      method: API_METHOD.GET,\n      apiUrl: `${API_URL.RECENT_ACTIVITY}${id}`\n    };\n    data = await FetchApiResponse(reqDetails);\n  }\n  return data;\n}\n\nexport const getCustomerData = async(id) => {\n  let data;\n  if (typeof(id) === 'number') {\n    const reqDetails = {\n      method: API_METHOD.GET,\n      apiUrl: `${API_URL.CUSTOMER}${id}`\n    };\n    data = await FetchApiResponse(reqDetails);\n  }\n  return data;\n}","import moment from 'moment';\nimport cloneDeep from 'lodash/cloneDeep';\nconst monthList = moment.monthsShort();\n\nconst barChartDefaultData = {\n  orderEntry: {\n    valueKeys: {\n      xAxis: 'ORDER_ENTRY',\n      goal: 'MONTHLY_ORDER_ENTRY_GOAL',\n      average: 'AVERAGE_ORDER_ENTRY'\n    },\n    title: 'Order Entry',\n    barColor: '#4E74BC',\n    legends: [\n      {\n        label: 'OE',\n        color: '#4E74BC',\n        type: 'bar'\n      }\n    ]\n  },\n  salesCallByMonth: {\n    valueKeys: {\n      xAxis: 'SALES_CALL_BY_MONTH',\n      goal: 'MONTHLY_SALES_CALL_GOAL',\n      average: 'AVERAGE_MONTHLY_SALES_CALL'\n    },\n    title: 'Sales Call By Month',\n    barColor: '#4E74BC',\n    legends: [\n      {\n        label: 'Sales Call',\n        color: '#4E74BC',\n        type: 'bar'\n      }\n    ]\n  },\n  annualizedSales: {\n    title: 'ANNUALIZED SALES'\n  }\n};\n\nconst prepareLegendsList = (data, apiName) => {\n  const legendsList = [];\n  const { legends } = barChartDefaultData[apiName];\n  legendsList.push(...legends);\n  // if (data.goal && data.goal.length) {\n  //   legendsList.push({\n  //     type: 'line',\n  //     name: 'Goals',\n  //     color: '#EC7E2E',\n  //     marker: {\n  //       enabled: false\n  //     }\n  //   });\n  // }\n  // if (data.average && data.average.length) {\n  //   legendsList.push({\n  //     type: 'line',\n  //     name: 'Average',\n  //     color: '#A6A6A6',\n  //     marker: {\n  //       enabled: false\n  //     }\n  //   });\n  // }\n  return legendsList;\n}\n\nexport const prepareDataForBarChart = (apiData, apiName) => {\n  let barChartData;\n  const { title, barColor, valueKeys } = barChartDefaultData[apiName];\n  const { xAxis, goal, average } = valueKeys;\n  if (apiData && apiData.length) {\n    barChartData = {};\n    barChartData.xAxisList = [];\n    barChartData.yAxisList = [];\n    barChartData.goal = [];\n    barChartData.average = [];\n    apiData.forEach((item) => {\n      barChartData.xAxisList.push(monthList[item.MONTH - 1]);\n      barChartData.yAxisList.push(item[xAxis]);\n      if (item[goal] && item[goal] > 0) {\n        barChartData.goal.push(item[goal]);\n      }\n      if (item[average] && item[average] > 0) {\n        barChartData.average.push(item[average]);\n      }\n    });\n    barChartData.title = apiData.title || title;\n    barChartData.barColor = apiData.barColor || barColor;\n    barChartData.legends = cloneDeep(prepareLegendsList(barChartData, apiName));\n  }\n  return barChartData;\n}\n\nexport const prepareDataForAreaChart = (apiData, apiName) => {\n  let chartData;\n  const { title } = barChartDefaultData[apiName];\n  if (apiData && apiData.length) {\n    chartData = {};\n    chartData.xAxisList = [];\n    chartData.yAxisList = [];\n    chartData.yAxisBarList = [];\n    apiData.forEach((item) => {\n      chartData.xAxisList.push((monthList[item.MONTH - 1]));\n      chartData.yAxisList.push(item.ANNUALIZED_SALES);\n      chartData.yAxisBarList.push(item.TOTAL);\n      if (!chartData.maxYAxis || chartData.maxYAxis < item.ANNUALIZED_SALES) {\n        chartData.maxYAxis = item.ANNUALIZED_SALES;\n      }\n      if (!chartData.year) {\n        chartData.year = item.YEAR;\n      }\n    });\n    // chartData.yAxisBarList = Array(chartData.yAxisList.length).fill(chartData.maxYAxis);\n    chartData.title = apiData.title || title;\n  }\n  return chartData;\n}\n\nexport const prepareDataForLineChart = (apiData, apiName) => {\n  let chartData;\n  if (apiData) {\n    const { title, series } = apiData;\n    if (series && series.length) {\n      chartData = {};\n      chartData.xAxisList = [];\n      chartData.series = [];\n      chartData.maxNumber = 0;\n      series.forEach((item) => {\n        chartData.series.push({\n          name: item.name,\n          color: item.color,\n          data: item.data.map(monthSale => {\n            if (monthSale[2] > chartData.maxNumber) {\n              chartData.maxNumber = monthSale[2];\n            }\n            return monthSale[2];\n          }),\n          marker: {\n            enabled: false\n          }\n        });\n      });\n      series[0].data.forEach((item) => {\n        chartData.xAxisList.push(item[1].toString())\n      });\n      chartData.title = title;\n    }\n  }\n  return chartData;\n}\n\nexport const prepareDataForPieChart = (apiData, apiName) => {\n  return apiData && apiData.series && apiData.series.length ? apiData : null;\n}\n","/**\n * Get the URL parameters\n * @param  {String} url The URL\n * @return {Object}     The URL parameters\n */\nexport const getUrlParams = function (url) {\n\tvar params = {};\n\tvar parser = document.createElement('a');\n\tparser.href = url;\n\tvar query = parser.search.substring(1);\n\tvar vars = query.split('&');\n\tfor (var i = 0; i < vars.length; i++) {\n\t\tvar pair = vars[i].split('=');\n\t\tparams[pair[0]] = decodeURIComponent(pair[1]);\n\t}\n\treturn params;\n};","import React from 'react';\nimport ReactHighcharts from 'react-highcharts';\n\nReactHighcharts.Highcharts.setOptions({\n  lang: {\n    thousandsSep: ','\n  },\n});\n\nconst getConfig = (chartData) => {\n  if (chartData) {\n    const { xAxisList, yAxisList, title, goal, average } = chartData;\n    const BAR_MAX_NUMBER = Math.max(...yAxisList, ...goal, ...average);\n    return {\n      chart: {\n        type: 'column',\n        height: 300\n      },\n      legend: {\n        enabled: true,\n        symbolHeight: 11,\n        symbolWidth: 25,\n        squareSymbol: false,\n        symbolRadius: 0\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: title\n      },\n      yAxis: {\n        min: 0,\n        max: BAR_MAX_NUMBER,\n        title: {\n          text: ''\n        },\n        stackLabels: {\n          enabled: true,\n          style: {\n            fontWeight: 'bold',\n            color: 'gray'\n          }\n        },\n        floor: 0,\n        tickAmount: BAR_MAX_NUMBER > 7 ? Math.floor(BAR_MAX_NUMBER / (BAR_MAX_NUMBER / 7)) : BAR_MAX_NUMBER\n      },\n      xAxis: {\n        categories: xAxisList\n      },\n      tooltip: {\n        headerFormat: '<b>{point.x}</b><br/>',\n        pointFormat: '{series.name}: {point.y}'\n      },\n      series: chartData ? prepareSeries(chartData) : null\n    };\n  }\n  return null;\n}\n\nconst prepareSeries = (chartData) => {\n  const { yAxisList, barColor, goal, average, legends } = chartData;\n  const series = [\n    {\n      name: legends[0].label,\n      data: yAxisList,\n      zIndex: 0,\n      color: barColor,\n      zones: []\n    }\n  ];\n  if (goal && goal.length) {\n    series.push({\n      type: 'line',\n      name: 'Goal',\n      data: goal,\n      color: '#EC7E2E',\n      marker: {\n        enabled: false\n      }\n    });\n  }\n  const prevYear = new Date().getFullYear()-1;\n  if (average && average.length) {\n    series.push({\n      type: 'line',\n      name: `${prevYear} Average`,\n      data: average,\n      color: '#A6A6A6',\n      marker: {\n        enabled: false\n      }\n    });\n  }\n  return series;\n}\n\nconst BarChart = ({data}) => <ReactHighcharts config={getConfig(data)} />;\n\n// const BarChart = (data, apiName) => {\n//   return (\n//     <Col md={4} className=\"chartWrapper\">\n//       <ReactHighcharts config={this.getBarChartConfig(apiName)} />\n//       {data.legends && data.legends.length ?\n//         <ul className=\"chartLegends\">\n//           {data.legends.map((item) =>\n//             <li>\n//               <span className={item.type} style={{ backgroundColor: item.color }}></span>\n//               {item.label}\n//             </li>\n//           )}\n//         </ul> : null\n//       }\n//     </Col>\n//   );\n// }\n\nexport default BarChart;\n","import React from 'react';\nimport ReactHighcharts from 'react-highcharts';\n\nReactHighcharts.Highcharts.setOptions({\n  lang: {\n    thousandsSep: ','\n  },\n});\n\nconst getConfig = (chartData) => {\n  if (chartData) {\n    const { xAxisList, yAxisList, title, year, yAxisBarList } = chartData;\n    const BAR_MAX_NUMBER = Math.max(...yAxisList, ...yAxisBarList);\n    return {\n      lang: {\n        thousandsSep: ','\n      },\n      chart: {\n        type: 'area',\n        height: 300\n      },\n      legend: {\n        enabled: true,\n        symbolHeight: 11,\n        symbolWidth: 25,\n        squareSymbol: false,\n        symbolRadius: 0\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: title\n      },\n      yAxis: {\n        min: 0,\n        max: BAR_MAX_NUMBER,\n        title: {\n          text: ''\n        },\n        stackLabels: {\n          enabled: true,\n          style: {\n            fontWeight: 'bold',\n            color: 'gray'\n          }\n        },\n        floor: 1,\n        tickAmount: BAR_MAX_NUMBER > 7 ? Math.floor(BAR_MAX_NUMBER / (BAR_MAX_NUMBER / 7)) : BAR_MAX_NUMBER\n      },\n      xAxis: {\n        categories: xAxisList\n      },\n      tooltip: {\n        headerFormat: '<b>{point.x}</b><br/>',\n        pointFormat: '{series.name}: {point.y}'\n      },\n      series: [\n        {\n          name: `${year} Potential`,\n          data: yAxisBarList,\n          color: '#E4E4E4',\n          marker: {\n            enabled: false\n          }\n        },\n        {\n          name: 'Annualized sales',\n          data: yAxisList,\n          zIndex: 0,\n          color: '#E3B090',\n          marker: {\n            enabled: false\n          }\n        }\n      ]\n    };\n  }\n  return null;\n}\n\nconst AreaChart = ({ data }) => <ReactHighcharts config={getConfig(data)} />;\n\n// renderAreaChart = (data, apiName) => {\n//   return (\n//     <Col md={4} className=\"chartWrapper\">\n//       <ReactHighcharts config={this.getAreaChartConfig(apiName)} />\n//       {data.legends && data.legends.length ?\n//         <ul className=\"chartLegends\">\n//           {data.legends.map((item) =>\n//             <li>\n//               <span className={item.type} style={{ backgroundColor: item.color }}></span>\n//               {item.label}\n//             </li>\n//           )}\n//         </ul> : null\n//       }\n//     </Col>\n//   );\n// }\n\nexport default AreaChart;","import React from 'react';\nimport ReactHighcharts from 'react-highcharts';\n\nReactHighcharts.Highcharts.setOptions({\n  lang: {\n    thousandsSep: ','\n  },\n});\n\nconst getConfig = (chartData) => {\n  if (chartData) {\n    const { xAxisList, series, title, maxNumber } = chartData;\n    const BAR_MAX_NUMBER = maxNumber;\n    return {\n      chart: {\n        type: 'line',\n        height: 300\n      },\n      legend: {\n        enabled: true,\n        symbolHeight: 11,\n        symbolWidth: 25,\n        squareSymbol: false,\n        symbolRadius: 0\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: title\n      },\n      yAxis: {\n        min: 0,\n        max: BAR_MAX_NUMBER,\n        title: {\n          text: ''\n        },\n        stackLabels: {\n          enabled: true,\n          style: {\n            fontWeight: 'bold',\n            color: 'gray'\n          }\n        },\n        floor: 1,\n        tickAmount: BAR_MAX_NUMBER > 7 ? Math.floor(BAR_MAX_NUMBER / (BAR_MAX_NUMBER / 7)) : BAR_MAX_NUMBER\n      },\n      xAxis: {\n        categories: xAxisList\n      },\n      tooltip: {\n        headerFormat: '<b>{point.x}</b><br/>',\n        pointFormat: '{series.name}: {point.y}'\n      },\n      series\n    };\n  }\n  return null;\n}\n\nconst LineChart = ({ data }) => <ReactHighcharts config={getConfig(data)} />;\n\n// renderLineChart = () => {\n//   return (\n//     <Col md={4} className=\"chartWrapper\">\n//       <ReactHighcharts config={this.getLineChartConfig()} />\n//       {data.legends && data.legends.length ?\n//         <ul className=\"chartLegends\">\n//           {data.legends.map((item) =>\n//             <li>\n//               <span className={item.type} style={{ backgroundColor: item.color }}></span>\n//               {item.label}\n//             </li>\n//           )}\n//         </ul> : null\n//       }\n//     </Col>\n//   );\n// }\n\nexport default LineChart;","import React from 'react';\nimport ReactHighcharts from 'react-highcharts';\n\nReactHighcharts.Highcharts.setOptions({\n  lang: {\n    thousandsSep: ','\n  },\n});\n\nconst getConfig = (chartData) => {\n  if (chartData) {\n    const { series, title } = chartData;\n    return {\n      chart: {\n        type: 'pie',\n        height: 300\n      },\n      colors: ['#50B432', '#ED561B', '#DDDF00', '#24CBE5', '#64E572', '#FF9655', '#FFF263', '#6AF9C4'],\n      legend: {\n        enabled: true,\n        symbolHeight: 11,\n        symbolWidth: 25,\n        squareSymbol: false,\n        symbolRadius: 0\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: title\n      },\n      series: [{\n        ...series[0],\n        dataLabels: {\n          enabled: false\n        }\n      }]\n    };\n  }\n  return null;\n}\n\nconst PieChart = ({data}) => <ReactHighcharts config={getConfig(data)} />;\n\nexport default PieChart;","import React from 'react';\nimport './index.scss';\n\nconst LoadingScreen = () => {\n  return (\n    <div className=\"loading-overlay\">\n      <div className=\"lds-roller\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n\nexport default LoadingScreen;","import React from 'react';\nimport { Col, Table } from 'react-bootstrap';\n\nconst TopContactsTable = ({ data }) => {\n  if (data && data.length) {\n    return (\n      <Col md={12}>\n        <h4 className=\"heading1\">Contacts</h4>\n        <Table striped bordered hover className=\"top-contacts-table\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Title</th>\n              <th>Product Interests</th>\n            </tr>\n          </thead>\n        </Table>\n        <div className=\"top-contacts\">\n          <Table striped bordered hover className=\"top-contacts-table\">\n            <tbody>\n              {\n                data.map((contact, index) =>\n                  <tr key={index}>\n                    <td>{contact.NAME || ''}</td>\n                    <td>{contact.TITLE || ''}</td>\n                    <td>{contact.TARGET || ''}</td>\n                  </tr>\n                )}\n            </tbody>\n          </Table>\n        </div>\n      </Col>\n    )\n  }\n  return null;\n}\n\nexport default TopContactsTable;","import React from 'react';\nimport { Col, Table } from 'react-bootstrap';\n\nconst RecentActivity = ({ data }) => {\n  return (\n    <Col md={12} className=\"recent-activities\">\n      <h4 className=\"heading1\">Recent Activity</h4>\n      <Table striped bordered hover className=\"top-contacts-table\">\n        <tbody>\n          {\n            data.map((activity, index) =>\n              <tr key={index}>\n                <td dangerouslySetInnerHTML={{ __html: activity.MSG }}></td>\n              </tr>\n            )\n          }\n        </tbody>\n      </Table>\n      {/* {\n        data.map(activity =>\n          <div dangerouslySetInnerHTML={{ __html: activity.MSG }}></div>\n        )\n      } */}\n    </Col>\n  )\n};\n\nexport default RecentActivity;","import React from 'react';\nimport { Container, Row, Col, Navbar, Modal, Button } from 'react-bootstrap';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isPlainObject from 'lodash/isPlainObject';\nimport {\n  getSalesCallByMonthData,\n  getOrderEntryData,\n  getAnnualizedSalesData,\n  getSalesByMonthData,\n  getOneCustomerInvData,\n  getSalesBreakdownData,\n  getS3SalesBreakdownData,\n  getTopContactsData,\n  getRecentActivityData,\n  getCustomerData\n} from '../../utils/networkUtils';\nimport {\n  prepareDataForBarChart,\n  prepareDataForAreaChart,\n  prepareDataForLineChart,\n  prepareDataForPieChart\n} from '../../utils/chartUtils';\nimport { getUrlParams } from '../../utils/commonUtils';\nimport { API_NAMES, PAGE_STATUS } from '../../constants';\nimport BarChart from '../../components/charts/bar';\nimport AreaChart from '../../components/charts/area';\nimport LineChart from '../../components/charts/line';\nimport PieChart from '../../components/charts/pie';\nimport './index.scss';\nimport LoadingScreen from '../../components/loadingScreen';\nimport TopContactsTable from './topContacts';\nimport RecentActivity from './recentActivity';\n\nexport default class Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      salesByMonthData: null,\n      salesCallByMonthData: null,\n      orderEntryData: null,\n      annualizedSalesData: null,\n      oneCustomerInvData: null,\n      salesBreakdownData: null,\n      s3salesBreakdownData: null,\n      topContactsData: null,\n      customerData: null,\n      pageStatus: PAGE_STATUS.DEFAULT\n    };\n  }\n\n  async componentDidMount() {\n    this.setState({\n      pageStatus: PAGE_STATUS.LOADING\n    });\n    const params = getUrlParams(window.location.href);\n    let customerKey = params && params.customer_key;\n    customerKey = parseInt(customerKey);\n    if (customerKey) {\n      Promise.all([\n        getOrderEntryData(customerKey),\n        getSalesCallByMonthData(customerKey),\n        getAnnualizedSalesData(customerKey),\n        getSalesByMonthData(customerKey),\n        getOneCustomerInvData(customerKey),\n        getSalesBreakdownData(customerKey),\n        getS3SalesBreakdownData(customerKey),\n        getTopContactsData(customerKey),\n        getRecentActivityData(customerKey),\n        getCustomerData(customerKey)\n      ]).then((values) => {\n        this.setState({\n          orderEntryData: prepareDataForBarChart(values[0], API_NAMES.orderEntry),\n          salesCallByMonthData: prepareDataForBarChart(values[1], API_NAMES.salesCallByMonth),\n          annualizedSalesData: prepareDataForAreaChart(values[2], API_NAMES.annualizedSales),\n          salesByMonthData: prepareDataForLineChart(values[3], API_NAMES.salesByMonth),\n          oneCustomerInvData: prepareDataForLineChart(values[4], API_NAMES.oneCustomerInv),\n          salesBreakdownData: prepareDataForPieChart(values[5], API_NAMES.salesBreakDown),\n          s3salesBreakdownData: prepareDataForPieChart(values[6], API_NAMES.s3salesBreakdown),\n          topContactsData: values[7],\n          recentActivityData: values[8],\n          customerData: values[9],\n          errorMsgs: this.setErrorsMsgs(values),\n          pageStatus: PAGE_STATUS.SUCCESS\n        });\n      });\n    }\n  }\n\n  setErrorsMsgs = apiResponses => {\n    const errorMsgs = [];\n    if (apiResponses && apiResponses.length) {\n      apiResponses.forEach(res => {\n        if (isPlainObject(res) && res.errorMsg) {\n          errorMsgs.push(<>\n            <p>{`${res.sourceName}: ${res.errorLocation}`}</p>\n            <p>{res.errorMsg}</p>\n          </>);\n        }\n      });\n    }\n    return errorMsgs;\n  }\n\n  getBarChartData = (apiName) => {\n    const { orderEntryData, salesCallByMonthData } = this.state;\n    let chartData;\n    if (apiName === API_NAMES.orderEntry) {\n      chartData = cloneDeep(orderEntryData);\n    }\n    if (apiName === API_NAMES.salesCallByMonth) {\n      chartData = cloneDeep(salesCallByMonthData);\n    }\n    return chartData;\n  }\n\n  renderSuccessScreen = () => {\n    const {\n      salesCallByMonthData,\n      salesByMonthData,\n      orderEntryData,\n      annualizedSalesData,\n      oneCustomerInvData,\n      salesBreakdownData,\n      s3salesBreakdownData,\n      topContactsData,\n      recentActivityData\n    } = this.state;\n    return (\n      <Row>\n        <Col md={8} className=\"chartWrapper\">\n          <Row>\n            {salesCallByMonthData ?\n              <Col md={6} className=\"chartWrapper\">\n                <BarChart data={this.getBarChartData(API_NAMES.salesCallByMonth)} />\n              </Col> : null\n            }\n            {orderEntryData ?\n              <Col md={6} className=\"chartWrapper\">\n                <BarChart data={this.getBarChartData(API_NAMES.orderEntry)} />\n              </Col> : null\n            }\n            {salesByMonthData ?\n              <Col md={6} className=\"chartWrapper\">\n                <LineChart data={salesByMonthData} />\n              </Col> : null\n            }\n            {oneCustomerInvData ?\n              <Col md={6} className=\"chartWrapper\">\n                <LineChart data={oneCustomerInvData} />\n              </Col> : null\n            }\n            {salesBreakdownData ?\n              <Col md={6} className=\"chartWrapper\">\n                <PieChart data={salesBreakdownData} />\n              </Col> : null\n            }\n            {s3salesBreakdownData ?\n              <Col md={6} className=\"chartWrapper\">\n                <PieChart data={s3salesBreakdownData} />\n              </Col> : null\n            }\n          </Row>\n        </Col>\n        <Col md={4} className=\"chartWrapper\">\n          {annualizedSalesData ?\n            <Col md={12} className=\"chartWrapper\">\n              <AreaChart data={annualizedSalesData} />\n            </Col> : null\n          }\n          {recentActivityData && recentActivityData.length ?\n            <RecentActivity data={recentActivityData} /> : null\n          }\n          {topContactsData && topContactsData.length ?\n            <TopContactsTable data={topContactsData} /> : null\n          }\n        </Col>\n      </Row>\n    )\n  };\n\n  hideErrorModal = () => {\n    this.setState({\n      errorMsgs: null\n    });\n  }\n\n  renderErrorModal = () => {\n    const { errorMsgs } = this.state;\n    return (\n      <Modal\n        show={errorMsgs && errorMsgs.length}\n        onHide={this.hideErrorModal}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Body>\n          <p>Please email the error message below to DMS and wait to hear back from them before trying to use the page again</p>\n          {errorMsgs.map(error => error)}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={this.hideErrorModal}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n    )\n  }\n\n  render() {\n    const { pageStatus, customerData, errorMsgs } = this.state;\n    const { CUSTOMER, NAME } = customerData || {};\n    return (\n      <>\n        <Container>\n          <Navbar>\n            <Navbar.Brand className=\"logo-text\">{NAME || ''} Dashboard</Navbar.Brand>\n          </Navbar>\n          {pageStatus === PAGE_STATUS.SUCCESS && this.renderSuccessScreen()}\n          {pageStatus === PAGE_STATUS.LOADING && <LoadingScreen />}\n          {errorMsgs && errorMsgs.length ? this.renderErrorModal() : null}\n        </Container>\n      </>\n    );\n  }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Dashboard from './pages/dashboard';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}